// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: warden/warden/query.proto

package warden

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                     = "/warden.warden.Query/Params"
	Query_Spaces_FullMethodName                     = "/warden.warden.Query/Spaces"
	Query_SpacesByOwner_FullMethodName              = "/warden.warden.Query/SpacesByOwner"
	Query_Keychains_FullMethodName                  = "/warden.warden.Query/Keychains"
	Query_SpaceByAddress_FullMethodName             = "/warden.warden.Query/SpaceByAddress"
	Query_KeychainByAddress_FullMethodName          = "/warden.warden.Query/KeychainByAddress"
	Query_KeyRequests_FullMethodName                = "/warden.warden.Query/KeyRequests"
	Query_KeyRequestById_FullMethodName             = "/warden.warden.Query/KeyRequestById"
	Query_Keys_FullMethodName                       = "/warden.warden.Query/Keys"
	Query_SignatureRequests_FullMethodName          = "/warden.warden.Query/SignatureRequests"
	Query_SignatureRequestById_FullMethodName       = "/warden.warden.Query/SignatureRequestById"
	Query_SignTransactionRequests_FullMethodName    = "/warden.warden.Query/SignTransactionRequests"
	Query_SignTransactionRequestById_FullMethodName = "/warden.warden.Query/SignTransactionRequestById"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Spaces items.
	Spaces(ctx context.Context, in *QuerySpacesRequest, opts ...grpc.CallOption) (*QuerySpacesResponse, error)
	// Queries a list of Spaces that has the specified owner.
	SpacesByOwner(ctx context.Context, in *QuerySpacesByOwnerRequest, opts ...grpc.CallOption) (*QuerySpacesResponse, error)
	// Queries a list of Keychains items.
	Keychains(ctx context.Context, in *QueryKeychainsRequest, opts ...grpc.CallOption) (*QueryKeychainsResponse, error)
	// Queries a list of SpaceByAddress items.
	SpaceByAddress(ctx context.Context, in *QuerySpaceByAddressRequest, opts ...grpc.CallOption) (*QuerySpaceByAddressResponse, error)
	// Queries a list of KeychainById items.
	KeychainByAddress(ctx context.Context, in *QueryKeychainByAddressRequest, opts ...grpc.CallOption) (*QueryKeychainByAddressResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error)
	// Queries a single KeyRequest by its id.
	KeyRequestById(ctx context.Context, in *QueryKeyRequestByIdRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIdResponse, error)
	// Queries a list of Keys items.
	Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error)
	// Queries a single SignatureRequest by its id.
	SignatureRequestById(ctx context.Context, in *QuerySignatureRequestByIdRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIdResponse, error)
	// Queries a list of SignTransactionRequests items.
	SignTransactionRequests(ctx context.Context, in *QuerySignTransactionRequestsRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestsResponse, error)
	// Queries a list of SignTransactionRequestById items.
	SignTransactionRequestById(ctx context.Context, in *QuerySignTransactionRequestByIdRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestByIdResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Spaces(ctx context.Context, in *QuerySpacesRequest, opts ...grpc.CallOption) (*QuerySpacesResponse, error) {
	out := new(QuerySpacesResponse)
	err := c.cc.Invoke(ctx, Query_Spaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpacesByOwner(ctx context.Context, in *QuerySpacesByOwnerRequest, opts ...grpc.CallOption) (*QuerySpacesResponse, error) {
	out := new(QuerySpacesResponse)
	err := c.cc.Invoke(ctx, Query_SpacesByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keychains(ctx context.Context, in *QueryKeychainsRequest, opts ...grpc.CallOption) (*QueryKeychainsResponse, error) {
	out := new(QueryKeychainsResponse)
	err := c.cc.Invoke(ctx, Query_Keychains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpaceByAddress(ctx context.Context, in *QuerySpaceByAddressRequest, opts ...grpc.CallOption) (*QuerySpaceByAddressResponse, error) {
	out := new(QuerySpaceByAddressResponse)
	err := c.cc.Invoke(ctx, Query_SpaceByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeychainByAddress(ctx context.Context, in *QueryKeychainByAddressRequest, opts ...grpc.CallOption) (*QueryKeychainByAddressResponse, error) {
	out := new(QueryKeychainByAddressResponse)
	err := c.cc.Invoke(ctx, Query_KeychainByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error) {
	out := new(QueryKeyRequestsResponse)
	err := c.cc.Invoke(ctx, Query_KeyRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequestById(ctx context.Context, in *QueryKeyRequestByIdRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIdResponse, error) {
	out := new(QueryKeyRequestByIdResponse)
	err := c.cc.Invoke(ctx, Query_KeyRequestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error) {
	out := new(QueryKeysResponse)
	err := c.cc.Invoke(ctx, Query_Keys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error) {
	out := new(QuerySignatureRequestsResponse)
	err := c.cc.Invoke(ctx, Query_SignatureRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequestById(ctx context.Context, in *QuerySignatureRequestByIdRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIdResponse, error) {
	out := new(QuerySignatureRequestByIdResponse)
	err := c.cc.Invoke(ctx, Query_SignatureRequestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignTransactionRequests(ctx context.Context, in *QuerySignTransactionRequestsRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestsResponse, error) {
	out := new(QuerySignTransactionRequestsResponse)
	err := c.cc.Invoke(ctx, Query_SignTransactionRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignTransactionRequestById(ctx context.Context, in *QuerySignTransactionRequestByIdRequest, opts ...grpc.CallOption) (*QuerySignTransactionRequestByIdResponse, error) {
	out := new(QuerySignTransactionRequestByIdResponse)
	err := c.cc.Invoke(ctx, Query_SignTransactionRequestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Spaces items.
	Spaces(context.Context, *QuerySpacesRequest) (*QuerySpacesResponse, error)
	// Queries a list of Spaces that has the specified owner.
	SpacesByOwner(context.Context, *QuerySpacesByOwnerRequest) (*QuerySpacesResponse, error)
	// Queries a list of Keychains items.
	Keychains(context.Context, *QueryKeychainsRequest) (*QueryKeychainsResponse, error)
	// Queries a list of SpaceByAddress items.
	SpaceByAddress(context.Context, *QuerySpaceByAddressRequest) (*QuerySpaceByAddressResponse, error)
	// Queries a list of KeychainById items.
	KeychainByAddress(context.Context, *QueryKeychainByAddressRequest) (*QueryKeychainByAddressResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(context.Context, *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error)
	// Queries a single KeyRequest by its id.
	KeyRequestById(context.Context, *QueryKeyRequestByIdRequest) (*QueryKeyRequestByIdResponse, error)
	// Queries a list of Keys items.
	Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(context.Context, *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error)
	// Queries a single SignatureRequest by its id.
	SignatureRequestById(context.Context, *QuerySignatureRequestByIdRequest) (*QuerySignatureRequestByIdResponse, error)
	// Queries a list of SignTransactionRequests items.
	SignTransactionRequests(context.Context, *QuerySignTransactionRequestsRequest) (*QuerySignTransactionRequestsResponse, error)
	// Queries a list of SignTransactionRequestById items.
	SignTransactionRequestById(context.Context, *QuerySignTransactionRequestByIdRequest) (*QuerySignTransactionRequestByIdResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Spaces(context.Context, *QuerySpacesRequest) (*QuerySpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spaces not implemented")
}
func (UnimplementedQueryServer) SpacesByOwner(context.Context, *QuerySpacesByOwnerRequest) (*QuerySpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpacesByOwner not implemented")
}
func (UnimplementedQueryServer) Keychains(context.Context, *QueryKeychainsRequest) (*QueryKeychainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keychains not implemented")
}
func (UnimplementedQueryServer) SpaceByAddress(context.Context, *QuerySpaceByAddressRequest) (*QuerySpaceByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceByAddress not implemented")
}
func (UnimplementedQueryServer) KeychainByAddress(context.Context, *QueryKeychainByAddressRequest) (*QueryKeychainByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeychainByAddress not implemented")
}
func (UnimplementedQueryServer) KeyRequests(context.Context, *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequests not implemented")
}
func (UnimplementedQueryServer) KeyRequestById(context.Context, *QueryKeyRequestByIdRequest) (*QueryKeyRequestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequestById not implemented")
}
func (UnimplementedQueryServer) Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedQueryServer) SignatureRequests(context.Context, *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequests not implemented")
}
func (UnimplementedQueryServer) SignatureRequestById(context.Context, *QuerySignatureRequestByIdRequest) (*QuerySignatureRequestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequestById not implemented")
}
func (UnimplementedQueryServer) SignTransactionRequests(context.Context, *QuerySignTransactionRequestsRequest) (*QuerySignTransactionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionRequests not implemented")
}
func (UnimplementedQueryServer) SignTransactionRequestById(context.Context, *QuerySignTransactionRequestByIdRequest) (*QuerySignTransactionRequestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionRequestById not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Spaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Spaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Spaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Spaces(ctx, req.(*QuerySpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpacesByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpacesByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpacesByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpacesByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpacesByOwner(ctx, req.(*QuerySpacesByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keychains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeychainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keychains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Keychains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keychains(ctx, req.(*QueryKeychainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpaceByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpaceByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpaceByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpaceByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpaceByAddress(ctx, req.(*QuerySpaceByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeychainByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeychainByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeychainByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeychainByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeychainByAddress(ctx, req.(*QueryKeychainByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeyRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequests(ctx, req.(*QueryKeyRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeyRequestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequestById(ctx, req.(*QueryKeyRequestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Keys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keys(ctx, req.(*QueryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignatureRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequests(ctx, req.(*QuerySignatureRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignatureRequestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequestById(ctx, req.(*QuerySignatureRequestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignTransactionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignTransactionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignTransactionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignTransactionRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignTransactionRequests(ctx, req.(*QuerySignTransactionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignTransactionRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignTransactionRequestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignTransactionRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignTransactionRequestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignTransactionRequestById(ctx, req.(*QuerySignTransactionRequestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warden.warden.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Spaces",
			Handler:    _Query_Spaces_Handler,
		},
		{
			MethodName: "SpacesByOwner",
			Handler:    _Query_SpacesByOwner_Handler,
		},
		{
			MethodName: "Keychains",
			Handler:    _Query_Keychains_Handler,
		},
		{
			MethodName: "SpaceByAddress",
			Handler:    _Query_SpaceByAddress_Handler,
		},
		{
			MethodName: "KeychainByAddress",
			Handler:    _Query_KeychainByAddress_Handler,
		},
		{
			MethodName: "KeyRequests",
			Handler:    _Query_KeyRequests_Handler,
		},
		{
			MethodName: "KeyRequestById",
			Handler:    _Query_KeyRequestById_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Query_Keys_Handler,
		},
		{
			MethodName: "SignatureRequests",
			Handler:    _Query_SignatureRequests_Handler,
		},
		{
			MethodName: "SignatureRequestById",
			Handler:    _Query_SignatureRequestById_Handler,
		},
		{
			MethodName: "SignTransactionRequests",
			Handler:    _Query_SignTransactionRequests_Handler,
		},
		{
			MethodName: "SignTransactionRequestById",
			Handler:    _Query_SignTransactionRequestById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warden/warden/query.proto",
}
